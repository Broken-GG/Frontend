name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Validate Frontend Files
  validate:
    name: Validate HTML & JavaScript
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Check file structure
      run: |
        echo "Checking required files..."
        test -f public/index.html || { echo "Missing index.html"; exit 1; }
        test -f public/src/js/HomePage/index.js || { echo "Missing HomePage script"; exit 1; }
        echo "✅ All required files present"
    
    - name: Validate JavaScript syntax
      run: |
        echo "Validating JavaScript files..."
        find public/src/js -name "*.js" -exec node --check {} \;
        echo "✅ JavaScript syntax valid"
    
    # Optional: Add ESLint if you want stricter checking
    # - name: Install ESLint
    #   run: npm install -g eslint
    # 
    # - name: Lint JavaScript
    #   run: |
    #     if [ -f .eslintrc.json ]; then
    #       eslint public/src/js/**/*.js
    #     else
    #       echo "No ESLint config, skipping"
    #     fi

  # Build Docker Image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker Image
      run: |
        docker build -t brokengg-frontend:latest .
        docker build -t brokengg-frontend:${{ github.sha }} .
    
    - name: Test Docker Image
      run: |
        docker run -d --name test-frontend -p 80:80 brokengg-frontend:latest
        sleep 5
        curl -f http://localhost/ || exit 1
        docker stop test-frontend
        docker rm test-frontend
    
    # Optional: Push to Docker Hub
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    # 
    # - name: Push to Docker Hub
    #   run: |
    #     docker tag brokengg-frontend:latest ${{ secrets.DOCKER_USERNAME }}/brokengg-frontend:latest
    #     docker tag brokengg-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/brokengg-frontend:${{ github.sha }}
    #     docker push ${{ secrets.DOCKER_USERNAME }}/brokengg-frontend:latest
    #     docker push ${{ secrets.DOCKER_USERNAME }}/brokengg-frontend:${{ github.sha }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

env:
  RIOT_API_KEY: ${{ secrets.RIOT_API_KEY }}
  RIOT_API_URL: ${{ secrets.RIOT_API_URL }}
  RIOT_SUMMONER_URL: ${{ secrets.RIOT_SUMMONER_URL }}
  ASPNETCORE_ENVIRONMENT: ${{ secrets.ASPNETCORE_ENVIRONMENT }}
  ASPNETCORE_URLS: ${{ secrets.ASPNETCORE_URLS }}
